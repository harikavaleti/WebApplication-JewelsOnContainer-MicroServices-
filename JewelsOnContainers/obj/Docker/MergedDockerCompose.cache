networks:
  backend: {}
  frontend: {}
services:
  basket.data:
    container_name: basketdata
    image: redis
    networks:
      backend: null
    ports:
    - published: 6210
      target: 6379
  cart:
    build:
      context: C:\Users\Admin\Desktop\Git\WebApplication-JewelsOnContainer-MicroServices-\JewelsOnContainers\CartApi
      dockerfile: Dockerfile
    container_name: cartapi
    depends_on:
    - basket.data
    - rabbitmq
    - tokenserver
    environment:
      ConnectionString: basket.data
      IdentityUrl: http://192.168.0.10:6700
    image: jewels/cartapi
    networks:
      backend: null
      frontend: null
    ports:
    - published: 8801
      target: 80
  catalogservice:
    build:
      context: C:\Users\Admin\Desktop\Git\WebApplication-JewelsOnContainer-MicroServices-\JewelsOnContainers\ProductCatalogApi
      dockerfile: Dockerfile
    container_name: jewelscatalogapi
    depends_on:
    - mssqlserver
    environment:
      DatabaseName: CatalogDb
      DatabasePassword: ProductApi(!)
      DatabaseServer: mssqlServer
      DatabaseUser: sa
      ExternalCatalogBaseUrl: http://localhost:8800
    image: jewels/catalogserviceapi
    networks:
      backend: null
      frontend: null
    ports:
    - published: 8800
      target: 80
  mssqlserver:
    container_name: jewelssqlserver
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: ProductApi(!)
    image: microsoft/mssql-server-linux:latest
    networks:
      backend: null
    ports:
    - published: 1448
      target: 1433
  order:
    build:
      context: C:\Users\Admin\Desktop\Git\WebApplication-JewelsOnContainer-MicroServices-\JewelsOnContainers\OrderApi
      dockerfile: Dockerfile
    container_name: orderapi
    depends_on:
    - mssqlserver
    - rabbitmq
    - tokenserver
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabasePassword: ProductApi(!)
      DatabaseServer: mssqlserver
      DatabaseServerName: OrdersDb
      DatabaseUser: sa
      IdentityUrl: http://192.168.0.10:6700
    image: jewels/orderapi
    logging:
      driver: json-file
      options:
        max-file: '10'
        max-size: 200k
    networks:
      backend: null
      frontend: null
    ports:
    - published: 8802
      target: 80
  rabbitmq:
    container_name: rabbitmq
    hostname: myrabbitmq
    image: rabbitmq:3-management
    networks:
      backend: null
    ports:
    - published: 15672
      target: 15672
    - published: 5672
      target: 5672
    - published: 5671
      target: 5671
    volumes:
    - C:\Users\Admin\rabbitmq:/var/lib/rabbitmq/mnesia:rw
  tokenserver:
    build:
      context: C:\Users\Admin\Desktop\Git\WebApplication-JewelsOnContainer-MicroServices-\JewelsOnContainers\TokenServiceApi
      dockerfile: Dockerfile
    container_name: tokenserviceapi
    depends_on:
    - mssqlserver
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      MvcClient: http://localhost:5210
    image: jewels/tokenapi
    logging:
      driver: json-file
      options:
        max-file: '10'
        max-size: 200k
    networks:
      backend: null
      frontend: null
    ports:
    - published: 6700
      target: 80
  webmvc:
    build:
      context: C:\Users\Admin\Desktop\Git\WebApplication-JewelsOnContainer-MicroServices-\JewelsOnContainers\webmvc
      dockerfile: Dockerfile
    container_name: webshop
    depends_on:
    - cart
    - catalogservice
    - order
    - tokenserver
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      CallBackUrl: http://localhost:5210
      CartUrl: http://cart
      CatalogUrl: http://catalogservice
      IdentityUrl: http://192.168.0.10:6700
      OrderUrl: http://order
      StripePrivateKey: sk_test_UnsaIsl4scWFMgShOGBEceec00yd02ofrX
      StripePublicKey: pk_test_TsdrydjbF4Hoe46r6jByS7Ye00DmKSK91L
    image: jewels/webmvc
    networks:
      frontend: null
    ports:
    - published: 5210
      target: 80
version: '3.4'